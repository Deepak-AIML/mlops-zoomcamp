import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import plotly as plt
from sklearn.feature_extraction import DictVectorizer

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter


def create_feature_matrix(df: pd.DataFrame, col_1: str, col_2: str):
    # Convert the DataFrame to a list of dictionaries
    data = df.copy()
    data_dict = data[[col_1, col_2]].astype(str).to_dict(orient='records')
    
    # Create an instance of DictVectorizer
    dict_vectorizer = DictVectorizer()
    
    # Fit and transform the data
    feature_matrix = dict_vectorizer.fit_transform(data_dict)
    
    # Get the feature names
    feature_names = dict_vectorizer.get_feature_names_out()
    
    # Get the dimensionality of the feature matrix
    dimensionality = feature_matrix.shape[1]
    print(f"\nDimensionality of the Feature Matrix: {dimensionality}")
    
    return feature_matrix, feature_names, dict_vectorizer


@data_exporter
def export_data(data, *args, **kwargs):
    """
    Exports data to some source.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Output (optional):
        Optionally return any object and it'll be logged and
        displayed when inspecting the block run.
    """
    # Specify your data exporting logic here
    col1 = 'PULocationID'
    col2 = 'DOLocationID'

    

